pipeline {
    agent any
    environment {
        IMAGE_NAME = "flaskimage"  // Docker image name
        APP_PORT = 5000  // Flask app port
    }
    stages {
        stage('checkoutscm') {
        steps {
            script {
                echo "Code checkout begin shortly.."
                sh '''
                git clone https://github.com/thangacodes/python-scripts.git || { echo 'Git clone failed'; exit 1; }
                cd python-scripts/python_flask_cicd || { echo 'Failed to navigate to directory'; exit 1; }
                echo "List out the files"
                ls -l .
                '''
            }
        }
    }
        }

        stage('build') {
            steps {
                script {
                    echo "Creating necessary files..."
                    sh '''
                    cd python-scripts/python_flask_cicd
                    # Build Docker image
                    docker build -t ${IMAGE_NAME} .
                    '''
                }
            }
        }

        stage('unit_test') {
            steps {
                script {
                    echo "Running unit tests..."
                    sh '''
                    cd python-scripts/python_flask_cicd
                    docker run --rm -v $(pwd):/app -w /app ${IMAGE_NAME} pytest test_app.py
                    '''
                }
            }
        }

        stage('deploy_app') {
            steps {
                script {
                    echo "Deploying Flask app..."
                    sh '''
                    cd python-scripts/python_flask_cicd
                    docker run -d -p ${APP_PORT}:${APP_PORT} ${IMAGE_NAME}
                    '''
                }
            }
        }

        stage('cleanws') {
            steps {
                script {
                    echo "Cleaning workspace..."
                    deleteDir()  // Clean the workspace
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up Docker containers..."
            sh '''
            docker ps -q | xargs docker stop || true
            docker ps -a -q | xargs docker rm || trued
            '''
        }
    }
}
