pipeline {
    agent any
    environment {
        IMAGE_NAME = "flaskimage"          //setting docker image value as static
        APP_PORT = 5000                   //setting default flask app port number
        SCRIPT="python_flask_cicd"       //hardcoding the directory where the python related script exists
        SLACK_CHANNEL = "jenkins-build" //slack channel here
        SLACK_CREDENTIALS = "slack"    //slack credentials from Jenkins
    }
    stages {
        stage('checkoutscm') {
            steps {
                script {
                    echo "Code checkout begin shortly.."
                    // Using Jenkins default checkout scm
                    checkout scm
                    echo "Listing out the files after checkout:"
                    sh 'ls -l ${SCRIPT}'
                }
            }
        }
        stage('build') {
            steps {
                script {
                    echo "Creating necessary files..."
                    sh '''
                    cd ${SCRIPT}
                    # Build Docker image
                    docker build -t ${IMAGE_NAME} .
                    '''
                }
            }
        }
        stage('unit_test') {
            steps {
                script {
                    echo "Running unit tests..."
                    sh '''
                    cd ${SCRIPT}
                    docker run --rm -v $(pwd):/app -w /app ${IMAGE_NAME} pytest test_app.py
                    '''
                }
            }
        }
        stage('deploy_app') {
            steps {
                script {
                    echo "Deploying Flask app..."
                    sh '''
                    cd ${SCRIPT}
                    docker run -d -p ${APP_PORT}:${APP_PORT} ${IMAGE_NAME}
                    '''
                }
            }
        }
        stage('cleanws') {
            steps {
                script {
                    echo "Cleaning workspace..."
                    deleteDir()  //default ws cleanup function
                }
            }
        }
    }
    post {
        success {
            script {
                slackSend(channel: SLACK_CHANNEL, message: "Build succeeded! :tada:", color: 'good', credentialsId: SLACK_CREDENTIALS)
            // Send email notification
            emailext (
                to: 'td@gmail.com',
                subject: "Build ${env.BUILD_ID} Succeeded!",
                body: "The build ${env.BUILD_ID} was successful! :tada:."
"
            )
            }
        }
        failure {
            script {
                slackSend(channel: SLACK_CHANNEL, message: "Build failed! :x:", color: 'danger', credentialsId: SLACK_CREDENTIALS)
            emailext (
                to: 'td@gmail.com', 
                subject: "Build ${env.BUILD_ID} Failed",
                body: "The build ${env.BUILD_ID} failed!. Please check the console logs."
            )
            }
        }
        always {
            echo "Cleaning up Docker containers..."
            sh '''
            # Stop running containers
            docker ps -q | xargs docker stop || true
            # Remove stopped containers
            docker ps -a -q | xargs docker rm || true
            # Remove all Docker images
            docker images -q | xargs docker rmi -f || true
            '''
        }
    }
}
